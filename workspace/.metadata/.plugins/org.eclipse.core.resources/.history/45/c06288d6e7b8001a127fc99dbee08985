package org.vanilladb.calvin.cache;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.vanilladb.calvin.sql.PrimaryKey;
import org.vanilladb.calvin.storage.tx.concurrency.ConservativeConcurrencyMgr;
import org.vanilladb.calvin.storage.tx.concurrency.ConservativeLockTable;
import org.vanilladb.calvin.storage.tx.concurrency.ConservativeLockTable.LockType;
import org.vanilladb.core.sql.Constant;
import org.vanilladb.core.storage.tx.Transaction;

public class TransactionCache {
	
	// For single thread
	private Transaction tx;
	private Map<PrimaryKey, InMemoryRecord> cachedRecords;
	private Set<PrimaryKey> dirtyKeys;
	
	// Anchors
	private static final int NUM_ANCHOR = 1009;
	private final Object anchors[] = new Object[NUM_ANCHOR];

	TransactionCache(Transaction tx) {
		this.tx = tx;
		this.cachedRecords = new ConcurrentHashMap<PrimaryKey, InMemoryRecord>();
		this.dirtyKeys = new HashSet<PrimaryKey>();
		
		for (int i = 0; i < anchors.length; ++i) {
			anchors[i] = new Object();
		}
	}
	
	private Object getAnchor(Object obj) {
		int code = obj.hashCode();
		code = Math.abs(code); // avoid negative value
		return anchors[code % anchors.length];
	}
	
	public InMemoryRecord readFromLocal(PrimaryKey key) {
		InMemoryRecord rec = cachedRecords.get(key);
		if (rec != null)
			return rec;
		
		rec = VanillaCoreStorage.read(key, tx);
		if (rec != null) {
			cachedRecords.put(key, rec);
		}
		
		return rec;
	}
	
	public InMemoryRecord readFromRemote(PrimaryKey key) {
		InMemoryRecord rec = cachedRecords.get(key);
		if (rec != null)
			return rec;
		
		try {
			String name = Thread.currentThread().getName();
			Thread.currentThread().setName(name + " waits for " + key + " from remote.");
			
			// Wait for remote records
			synchronized (getAnchor(cachedRecords)) {
				rec = cachedRecords.get(key);
				while (rec == null) {
					cachedRecords.wait();
					rec = cachedRecords.get(key);
				}
			}
			
			Thread.currentThread().setName(name);
			
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		return rec;
	}

	public void update(PrimaryKey key, InMemoryRecord rec) {
		cachedRecords.put(key, rec);
		dirtyKeys.add(key);
	}
	
	public void insert(PrimaryKey key, InMemoryRecord rec) {
		rec.setNewInserted();
		cachedRecords.put(key, rec);
		dirtyKeys.add(key);
	}

	public void insert(PrimaryKey key, Map<String, Constant> fldVals) {
		InMemoryRecord rec = InMemoryRecord.newRecordForInsertion(key, fldVals);
		cachedRecords.put(key, rec);
		dirtyKeys.add(key);
	}

	public void delete(PrimaryKey key) {
		InMemoryRecord dummyRec = InMemoryRecord.newRecordForDeletion(key);
		cachedRecords.put(key, dummyRec);
		dirtyKeys.add(key);
	}
	
	public void flush(ConservativeConcurrencyMgr ccMgr, long txNum) {
		ConservativeLockTable lockTbl = ccMgr.getLockTbl();
		for (PrimaryKey key : dirtyKeys) {
			InMemoryRecord rec = cachedRecords.get(key);
			
			if (rec.isDeleted()) {
				VanillaCoreStorage.delete(key, tx);
				lockTbl.release(key, txNum, LockType.X_LOCK);
			}else if (rec.isNewInserted()) {
				VanillaCoreStorage.insert(key, rec, tx);
				lockTbl.release(key, txNum, LockType.X_LOCK);
			}else if (rec.isDirty()) {
				VanillaCoreStorage.update(key, rec, tx);
				lockTbl.release(key, txNum, LockType.X_LOCK);
			}
		}
		dirtyKeys.clear();
	}
	
	void onReceivedRecord(InMemoryRecord record) {
		synchronized (cachedRecords) {
			cachedRecords.put(record.getPrimaryKey(), record);
			cachedRecords.notifyAll();
		}
	}
}
